@startuml

class "ListingRecordStore" as store {
    - _recordRepository : IRecordRepository
    + Records : List<Record>
    + FilterListingArgs : FilterListingArgs
    + ListingChanged : EventHandler<RepositoryChangedArgs>
}


interface "IRecordRepository" as repository {
    + GetNewId() : ulong
    + AddRecord(Record)
    + UpdateRecord(Record)
    + DeleteRecord(Record)
    + Contains(Record) : bool
    + GetAllRecords(filterPredicate) : IEnumerable<List>
    + GetAllRecords(FilterListingArgs) : IEnumerable<List>
    + RecordsChanged : EventHandler<RepositoryChangedArgs>
}

class "ListingRecordViewModel" as vm {
    - _recordRepository : IRecordRepository
    - _listingStore : ListingRecordStore
    + Records : List<Record>
    + AddRecordCommand
    # OnUpdatedListing()


}

class "FilterListingArgs" as filter {
        + From : DateTimeOffset? 

        + To : DateTimeOffset? 

        +Date  DateOnly? 

        + Projects :  List<Project>?

        +  Count : int?

        + IsActive :  bool?
}

vm --> store : "get current list"
vm --> repository : "add\\remove record"
store --> repository : "get records"
store --> filter : "filter records"


@enduml